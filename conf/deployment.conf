someApp {
  systemName = "ctptstplyawsd00"
  cloudType = "AWS"
  steps = {
    createLaunchConfig = {
      detailedMonitoring = true
      publicIpAddress = false
      instanceType = "t2.small"
      keyName = "ryan"
      securityGroups = ["sg-06939b63"]
    }
    createELB = {
      ListenerDescriptions = [
        {
          InstancePort = 9000
          InstanceProtocol = "http"
          LoadBalancerPort = 80
          Protocol = "http"
        },
        {
          InstancePort = 9000
          InstanceProtocol = "http"
          LoadBalancerPort = 443
          Protocol = "https"
          SSLCertificateId = "arn:aws:iam::567419588983:server-certificate/testcert-wildcard-10-2014"
        }
      ]
      ListenerPolicies = {
        FrontEnd = [
          {
            Port = 80
            PolicyNames = ["StickySession"]
          }, {
            Port = 443
            PolicyNames = ["SSLOldRecommendedPolicy", "StickySession"]
          }
        ]
        BackEnd = []
      }
      Scheme = "internet-facing"
      SecurityGroups = ["sg-86939be3"]
      Subnets = ["subnet-087bb751", "subnet-885ff2ff", "subnet-033ea939"]
      Tags = [
        {
          name = "billing"
          value = "automation-api-work"
        }
      ]
      HealthCheck = {
        Target = "HTTP:9000/"
        Interval = 5
        Timeout = 2
        HealthyThreshold = 3
        UnhealthyThreshold = 2
      }
      AccessLog = {
        CreateBucketPrefix = true
        GrantAccess = true
        EmitInterval = 60
        Enabled = true
        BucketName = "lw-elb-sandbox-logs"
        BucketPrefix = "someApp/prod"
      }
      ConnectionDraining = {
        Enabled = false
        Timeout = 284
      }
      ConnectionSettings = {
        IdleTimeout = 300
      }
      CrossZoneLoadBalancing = false
      Policies = [
        {
          PolicyName = "StickySession"
          PolicyTypeName = "AppCookieStickinessPolicyType"
          PolicyAttributeDescriptions = [
            {
              AttributeName: "CookieName",
              AttributeValue: "JSESSIONID"
            }
          ]
        }, {
          PolicyName: "CustomSSLPolicy",
          PolicyTypeName: "SSLNegotiationPolicyType"
          PolicyAttributeDescriptions = [
            {
              AttributeName: "Protocol-SSLv3",
              AttributeValue: true
            }, {
              AttributeName: "Protocol-TLSv1.1",
              AttributeValue: true
            }, {
              AttributeName: "DHE-RSA-AES256-SHA256",
              AttributeValue: true
            }, {
              AttributeName: "Server-Defined-Cipher-Order",
              AttributeValue: true
            }
          ]
        }, {
          PolicyName: "SSLOldRecommendedPolicy",
          PolicyTypeName: "SSLNegotiationPolicyType"
          PolicyAttributeDescriptions = [
            {
              AttributeName: "Reference-Security-Policy",
              AttributeValue: "ELBSecurityPolicy-2014-01"
            }
          ]
        }
      ]
    }
    createELBASG = {
      DefaultCooldown = 300
      DesiredCapacity = 3
      MinSize = 3
      MaxSize = 3
      HealthCheckGracePeriod = 300
      HealthCheckType = "ELB"
      PlacementGroup = ""
      VPCSubnetIdentifiers = ""
      Tags = [
        {
          name = "billing"
          value = "automation-api-work"
        }
      ]
      TerminationPolicies = []
    }
    cloudWatchAlarms = {
      //TODO: alarm settings
    }
    route53ELBSwitch = {

    }
  }

  stepOrder = ["createLaunchConfig", "createELB"]
}

include "deployment.stage.conf"
include "deployment.dev.conf"